<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="shiroCache" class="com.ysu.zyw.tc.openapi.fk.shiro.TcShiroCacheManager.TcShiroCache">
        <constructor-arg ref="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).OO_REDIS_CACHE}"/>
    </bean>

    <bean id="shiroCacheManager" class="com.ysu.zyw.tc.openapi.fk.shiro.TcShiroCacheManager">
        <property name="shiroCacheContainer">
            <map>
                <entry key="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).SHIRO_AUTHENTICATION_CACHE}"
                       value-ref="shiroCache"/>
                <entry key="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).SHIRO_AUTHORIZATION_CACHE}"
                       value-ref="shiroCache"/>
                <entry key="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).SHIRO_ACTIVE_SESSION_CACHE}"
                       value-ref="shiroCache"/>
            </map>
        </property>
    </bean>

    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="${properties.security.shiro.session.global.timeout.milesec}"/>
        <property name="deleteInvalidSessions" value="true"/>
        <!-- no necessary to validate session, because codis not support values operation -->
        <property name="sessionValidationSchedulerEnabled" value="false"/>
        <property name="sessionDAO">
            <bean class="com.ysu.zyw.tc.openapi.fk.shiro.TcSessionDao">
                <property name="sessionIdGenerator">
                    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.TcClusterSessionIdGenerator"/>
                </property>
            </bean>
        </property>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <constructor-arg value="tc_sid"/>
                <property name="httpOnly" value="true"/>
                <property name="maxAge" value="-1"/>
                <property name="domain" value="${properties.security.shiro.cookie.global.domain}"/>
            </bean>
        </property>
        <property name="sessionListeners">
            <list>
                <bean id="sessionLogger" class="com.ysu.zyw.tc.openapi.fk.shiro.TcLogSessionListener"/>
            </list>
        </property>
    </bean>

    <bean id="md5Sha256CredentialsMatcher"
          class="com.ysu.zyw.tc.openapi.fk.shiro.TcCredentialsMatcher"/>

    <bean id="abstractAuthorizingRealm" abstract="true" class="org.apache.shiro.realm.AuthorizingRealm">
        <property name="credentialsMatcher" ref="md5Sha256CredentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName"
                  value="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).SHIRO_AUTHENTICATION_CACHE}"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName"
                  value="#{T(com.ysu.zyw.tc.base.constant.TcBeanNameConsts).SHIRO_AUTHORIZATION_CACHE}"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>

    <bean id="authorizingRealm"
          parent="abstractAuthorizingRealm"
          class="com.ysu.zyw.tc.openapi.fk.shiro.TcAuthorizingRealm"/>

    <bean id="shiroRealms"
          class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="authorizingRealm"/>
            </list>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms" ref="shiroRealms"/>
        <property name="authenticator">
            <bean class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
                <property name="authenticationListeners">
                    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.TcLogAuthenticationListener"/>
                </property>
                <property name="authenticationStrategy">
                    <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
                </property>
                <property name="realms" ref="shiroRealms"/>
            </bean>
        </property>
        <property name="sessionManager" ref="shiroSessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="rememberMeManager">
            <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager">
                <property name="cipherKey"
                          value="${properties.security.shiro.session.remeberme.cookie.chpher.key.base64}"/>
                <property name="cookie">
                    <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                        <constructor-arg index="0" value="tc_rid"/>
                        <property name="httpOnly" value="true"/>
                        <property name="maxAge"
                                  value="${properties.security.shiro.session.rememberme.cookie.timeout.sec}"/>
                        <property name="domain"
                                  value="${properties.security.shiro.cookie.global.domain}"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="shiroFilter" class="com.ysu.zyw.tc.openapi.fk.shiro.TcShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${properties.security.shiro.login.url}"/>
        <property name="unauthorizedUrl" value="${properties.security.shiro.unauthorized.url}"/>
        <property name="filters">
            <map>
                <entry key="ssl">
                    <bean class="org.apache.shiro.web.filter.authz.SslFilter">
                        <property name="port" value="${properties.security.shiro.ssl.port}"/>
                    </bean>
                </entry>
                <entry key="requiresAllRolesDynamic">
                    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.enhance.TcRequiresAllRolesDynamicFilter"/>
                </entry>
                <entry key="requiresAnyRolesDynamic">
                    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.enhance.TcRequiresAnyRolesDynamicFilter"/>
                </entry>
            </map>
        </property>
        <property name="filterChainDefinitions" value="${properties.security.shiro.filter.chain.definitions}"/>
    </bean>

    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.support.TcRequiresRolesDynamicSup"/>

    <bean id="springAnnotationResolver" class="org.apache.shiro.spring.aop.SpringAnnotationResolver"/>

    <bean id="tcAopAllianceAnnotationsAuthorizingMethodInterceptor"
          class="com.ysu.zyw.tc.openapi.fk.shiro.internal.TcAopAllianceAnnotationsAuthorizingMethodInterceptor">
        <constructor-arg index="0" ref="springAnnotationResolver"/>
        <constructor-arg index="1">
            <list>
                <bean class="com.ysu.zyw.tc.openapi.fk.shiro.enhance.TcRequiresRolesDynamicAnnotationMethodInterceptor">
                    <constructor-arg index="0">
                        <bean class="com.ysu.zyw.tc.openapi.fk.shiro.enhance.TcRequiresRolesDynamicAnnotationHandler"/>
                    </constructor-arg>
                    <constructor-arg index="1" ref="springAnnotationResolver"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean class="com.ysu.zyw.tc.openapi.fk.shiro.internal.TcAuthorizationAttributeSourceAdvisor">
        <constructor-arg index="0" ref="tcAopAllianceAnnotationsAuthorizingMethodInterceptor"/>
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>